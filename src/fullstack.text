Sure! Below is a complete server (backend) and frontend (with CSS) setup for your project, including user authentication (JWT in cookies), role-based access (admin vs. user), and a basic UI with CRUD functionality for admins.

Backend: Node.js + Express + JWT + Cookies
1. Install dependencies for the backend:
bash
Copy code
npm install express bcryptjs jsonwebtoken cookie-parser cors
2. Backend server code (server.js):
javascript
Copy code
const express = require('express');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const cookieParser = require('cookie-parser');
const cors = require('cors');

const app = express();
app.use(express.json());
app.use(cookieParser());
app.use(cors({ origin: 'http://localhost:3000', credentials: true }));  // Frontend URL

const secretKey = 'mySecretKey';

// In-memory database (replace with a real DB in production)
let users = [
  { email: 'admin@gmail.com', password: bcrypt.hashSync('123456', 8), role: 'admin' },
  { email: 'user@gmail.com', password: bcrypt.hashSync('123456', 8), role: 'user' }
];

// Middleware to check if the user is authenticated
function isAuthenticated(req, res, next) {
  const token = req.cookies.token;
  if (!token) return res.status(401).json({ message: 'Unauthorized' });

  jwt.verify(token, secretKey, (err, decoded) => {
    if (err) return res.status(401).json({ message: 'Invalid token' });
    req.user = decoded;
    next();
  });
}

// Middleware to check if the user is an admin
function isAdmin(req, res, next) {
  if (req.user.role !== 'admin') return res.status(403).json({ message: 'Forbidden: Admins only' });
  next();
}

// Login route
app.post('/login', (req, res) => {
  const { email, password } = req.body;
  const user = users.find(u => u.email === email);
  if (!user) return res.status(404).json({ message: 'User not found' });

  const passwordIsValid = bcrypt.compareSync(password, user.password);
  if (!passwordIsValid) return res.status(401).json({ message: 'Invalid credentials' });

  // Generate JWT token and set it in cookies
  const token = jwt.sign({ email: user.email, role: user.role }, secretKey, { expiresIn: '1h' });
  res.cookie('token', token, { httpOnly: true }).json({ message: 'Login successful', role: user.role });
});

// Get all users (Admin only)
app.get('/users', isAuthenticated, isAdmin, (req, res) => {
  res.json(users.map(u => ({ email: u.email, role: u.role })));
});

// Create a new user (Admin only)
app.post('/createUser', isAuthenticated, isAdmin, (req, res) => {
  const { email, password, role } = req.body;
  const existingUser = users.find(u => u.email === email);
  if (existingUser) return res.status(400).json({ message: 'User already exists' });

  const hashedPassword = bcrypt.hashSync(password, 8);
  users.push({ email, password: hashedPassword, role });
  res.json({ message: 'User created successfully' });
});

// Delete a user (Admin only, except the admin cannot delete themselves)
app.delete('/deleteUser', isAuthenticated, isAdmin, (req, res) => {
  const { email } = req.body;
  const userIndex = users.findIndex(u => u.email === email);

  if (userIndex === -1) return res.status(404).json({ message: 'User not found' });
  if (users[userIndex].role === 'admin') return res.status(403).json({ message: 'Admin user cannot be deleted' });

  users.splice(userIndex, 1);  // Remove user from array
  res.json({ message: 'User deleted successfully' });
});

// Logout route
app.post('/logout', (req, res) => {
  res.clearCookie('token').json({ message: 'Logged out successfully' });
});

// Start server
app.listen(5000, () => {
  console.log('Server is running on http://localhost:5000');
});
Frontend: React + CSS
1. Install React dependencies:
bash
Copy code
npx create-react-app frontend
cd frontend
npm install axios
2. Login Component (src/components/Login.js):
javascript
Copy code
import React, { useState } from 'react';
import axios from 'axios';
import './Login.css';

function Login({ setRole }) {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [message, setMessage] = useState('');

  const handleLogin = async (e) => {
    e.preventDefault();
    try {
      const response = await axios.post('http://localhost:5000/login', { email, password }, { withCredentials: true });
      setRole(response.data.role);  // Set user role based on the response
      setMessage('Login successful!');
    } catch (error) {
      setMessage('Login failed');
    }
  };

  return (
    <div className="login-container">
      <h2>Login</h2>
      <form onSubmit={handleLogin}>
        <input
          type="email"
          placeholder="Email"
          value={email}
          onChange={(e) => setEmail(e.target.value)}
          required
        />
        <input
          type="password"
          placeholder="Password"
          value={password}
          onChange={(e) => setPassword(e.target.value)}
          required
        />
        <button type="submit">Login</button>
      </form>
      <p>{message}</p>
    </div>
  );
}

export default Login;
3. AdminPanel Component (src/components/AdminPanel.js):
javascript
Copy code
import React, { useEffect, useState } from 'react';
import axios from 'axios';
import './AdminPanel.css';

function AdminPanel() {
  const [users, setUsers] = useState([]);

  useEffect(() => {
    axios.get('http://localhost:5000/users', { withCredentials: true })
      .then(response => setUsers(response.data))
      .catch(err => console.error(err));
  }, []);

  const deleteUser = (email) => {
    axios.delete('http://localhost:5000/deleteUser', {
      withCredentials: true,
      data: { email }
    }).then(() => {
      setUsers(users.filter(user => user.email !== email));
    }).catch(err => console.error(err));
  };

  return (
    <div className="admin-panel">
      <h2>Admin Panel</h2>
      <ul>
        {users.map((user, index) => (
          <li key={index}>
            {user.email} ({user.role})
            {user.role !== 'admin' && <button onClick={() => deleteUser(user.email)}>Delete</button>}
          </li>
        ))}
      </ul>
    </div>
  );
}

export default AdminPanel;
4. App Component (src/App.js):
javascript
Copy code
import React, { useState } from 'react';
import Login from './components/Login';
import AdminPanel from './components/AdminPanel';
import './App.css';

function App() {
  const [role, setRole] = useState(null);

  return (
    <div className="app-container">
      {!role && <Login setRole={setRole} />}
      {role === 'admin' && <AdminPanel />}
      {role === 'user' && <h2>Hello User</h2>}
    </div>
  );
}

export default App;
5. Styling (CSS):
Create the following CSS files to style the application.

src/components/Login.css:

css
Copy code
.login-container {
  display: flex;
  flex-direction: column;
  align-items: center;
  padding: 20px;
  background-color: #f0f0f0;
  border-radius: 10px;
  width: 300px;
  margin: 100px auto;
}

input {
  margin-bottom: 10px;
  padding: 8px;
  width: 100%;
}

button {
  padding: 10px;
  background-color: #007bff;
  color: white;
  border: none;
  cursor: pointer;
  width: 100%;
}

button:hover {
  background-color: #0056b3;
}
src/components/AdminPanel.css:

css
Copy code
.admin-panel {
  width: 400px;
  margin: 50px auto;
  padding: 20px;
  background-color: #fff;
  border-radius: 10px;
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
}

.admin-panel ul {
  list-style: none;
  padding: 0;
}

.admin-panel li {
  display: flex;
  justify-content: space-between;
  padding: 10px;
  border-bottom: 1px solid #ddd;
}

button {
  background-color: #dc3545;
  color: white;
  border: none;
  padding: 5px 10px;
  cursor: pointer;
}

button:hover {
  background-color: #c